plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.steve'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "HelpChatRepoReleases"
        url = uri("https://repo.extendedclip.com/releases")
    }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    maven { url 'https://repo.codemc.io/repository/maven-snapshots/' }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.mojang:authlib:3.13.56")
    implementation('org.xerial:sqlite-jdbc:3.41.2.2')
    implementation 'net.wesjd:anvilgui:1.10.8-SNAPSHOT'
}

tasks {
    runServer {
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.withType(ProcessResources).configureEach {
    filesMatching("plugin.yml") {
        expand(
                'version': project.version
        )
    }
}

tasks.register('bumpVersion') {
    doLast {
        def props = file('gradle.properties')
        def text = props.text
        def matcher = text =~ /version=(\d+)\.(\d+)/
        if (matcher.find()) {
            int major = matcher.group(1).toInteger()
            int minor = matcher.group(2).toInteger()

            minor++
            if (minor >= 10) { // after 1.0.99 -> 1.1.0
                minor = 0
                major++
            }

            def newVersion = "${major}.${minor}"
            text = text.replaceFirst(/version=.*$/, "version=${newVersion}")
            props.text = text
            println "Version bumped to ${newVersion}"
        } else {
            throw new GradleException("Version not found!")
        }
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

build.finalizedBy(bumpVersion)
